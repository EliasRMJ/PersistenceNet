// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersistenceNet.Test.Domain;

#nullable disable

namespace PersistenceNet.Test.Migrations
{
    [DbContext(typeof(ContextTest))]
    [Migration("20250406111612_ClientStruct")]
    partial class ClientStruct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.Classification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Active")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("classification");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.EmailPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Mail");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailPerson");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.LegalPerson", b =>
                {
                    b.Property<long>("LegalPersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("LegalPersonId");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("DocumentNumber");

                    b.Property<string>("MunicipalRegistration")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MunicipalRegistration");

                    b.HasKey("LegalPersonId");

                    b.ToTable("LegalPerson");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Active")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("Active");

                    b.Property<string>("ComplementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ComplementName");

                    b.Property<DateTime>("InclusionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("InclusionDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("PersonType")
                        .HasColumnType("int")
                        .HasColumnName("PersonType");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.PhysicsPerson", b =>
                {
                    b.Property<long>("PhysicsPersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("PhysicsPersonId");

                    b.Property<DateOnly?>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateBirth");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("DocumentNumber");

                    b.HasKey("PhysicsPersonId");

                    b.ToTable("PhysicsPerson");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.EmailPerson", b =>
                {
                    b.HasOne("PersistenceNet.Test.Domain.Entitys.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.LegalPerson", b =>
                {
                    b.HasOne("PersistenceNet.Test.Domain.Entitys.Person", "Person")
                        .WithMany()
                        .HasForeignKey("LegalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.PhysicsPerson", b =>
                {
                    b.HasOne("PersistenceNet.Test.Domain.Entitys.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PhysicsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersistenceNet.Test.Domain.Entitys.Person", b =>
                {
                    b.Navigation("Emails");
                });
#pragma warning restore 612, 618
        }
    }
}
